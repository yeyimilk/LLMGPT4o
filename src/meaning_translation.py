
from utils.gpt_utils import get_batch_list, extract_content_from_gpt_response
import json
from data_loader import load_top_k_chinese_per_length
from data_loader import wrap_up_request


def generate_prompt(original_text, data_list, task_type):
    # task_type = 'meanings' or 'translations'
    prompt = f'Given the original Chinese text with its corresponding 5 {task_type} generated by another large language model with temperature set to 0, please evaluate the accuracy and consistence of the generated content.'
    prompt += '\nPlease provide your evaluation on two aspects: accuracy, 0 or 1, and consistence, 0 or 1.'
    prompt += "\nPlease provide your answer in json format. For example: {'accuracy': 1, 'consistence': 1}"
    
    prompt += f"\n------Original Chinese Text------\n{original_text}\n"
    prompt += f"\n------Generated {task_type}------\n"
    for i, item in enumerate(data_list):
        prompt += f"{i+1}. {item}\n"
    
    return prompt


def generate_batch_requests():
    file_name = 'gpt-4o-2024-05-13_meaning_translate_batch_requests_t_0_output.jsonl'
    gpt4o_outputs = get_batch_list(f'data/consistence/{file_name}')
    
    data = {}
    
    for item in gpt4o_outputs:
        customed_id, content = extract_content_from_gpt_response(item)
        d_id = customed_id.split('_')[0]
        d_type = customed_id.split('_')[1]
        
        if d_id not in data.keys():
            data[d_id] = {
                'meaning': [],
                'translation': [],
                'original_text': ''
            }
        
        if d_type[0] == '0':
            data[d_id]['meaning'].append(content)
        elif d_type[0] == '1':
            data[d_id]['translation'].append(content)
        else:
            print('Error')
    
    original_texts = load_top_k_chinese_per_length()
    for key in data.keys():
        if key in original_texts.keys():
            data[key]['original_text'] = original_texts[key]
        else:
            print(f"Error: {key}")

    file_name = "tmp.json"
    
    results = []
    for key, value in data.items():
        prompt = generate_prompt(value['original_text'], value['meaning'], 'meanings')
        results.append(wrap_up_request("gpt-4-turbo-2024-04-09", f"{key}_meanings", prompt, temperature=0))
        
        prompt = generate_prompt(value['original_text'], value['translation'], 'translations')
        results.append(wrap_up_request("gpt-4-turbo-2024-04-09", f"{key}_translations", prompt, temperature=0))
        
    filename = f"data/consistence/gpt-4-turbo-2024-04-09_consistence_batch_requests_t_0.jsonl"

    with open(filename, 'w', encoding='utf-8') as file:
        for item in results:
            json_str = json.dumps(item, ensure_ascii=False)
            file.write(json_str + '\n') 


def check_results():
    data = get_batch_list(f'data/consistence/gpt-4-turbo-2024-04-09_consistence_batch_requests_t_0_output.jsonl')
    
    result = {
        'meanings': {
            'accuracy': 0,
            'consistence': 0,
            'count': 0
        },
        'translations': {
            'accuracy': 0,
            'consistence': 0,
            'count': 0
        }
    }
    
    for d in data:
        customed_id, content = extract_content_from_gpt_response(d)
        obj = json.loads(content)
        if 'meanings' in customed_id:
            result['meanings']['accuracy'] += obj['accuracy']
            result['meanings']['consistence'] += obj['consistence']
            result['meanings']['count'] += 1
        elif 'translations' in customed_id:
            result['translations']['accuracy'] += obj['accuracy']
            result['translations']['consistence'] += obj['consistence']
            result['translations']['count'] += 1
        else:
            print("Error")
    
    print(f"Meanings    & {result['meanings']['accuracy'] / result['meanings']['count']:.4f} & {result['meanings']['consistence'] / result['meanings']['count']:.4f} \\\\")
    print(f"Translations    & {result['translations']['accuracy'] / result['translations']['count']:.4f} & {result['translations']['consistence'] / result['translations']['count']:.4f} \\\\")

if __name__ == '__main__':
    check_results()